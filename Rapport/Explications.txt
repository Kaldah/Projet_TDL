J'ai choisi d'introduire un nouveau type, le type Null pour gérer les pointeurs null plutôt que de réutiliser le type Undefined, cela permet de rester cohérent avec les tests de la fonction est_compatible.


J'ai restructuré Ast en plaçant le module AstSyntax dans un autre fichier pour éviter un bug de compilation qui pensait qu'il y avait un double import à cause du module AstTds même lorsque je n'importais que AstSyntax qui ne l'utilise pas.

J'ai fait ceci afin de pouvoir utiliser le type AstSyntax.defaut pour le placer dans le type InfoFun afin de pouvoir récupérer les paramètres par défaut dans la phase de gestion des identifiants et les intégrer à l'appel de fonction.

Ils sont ensuite effacé lorsqu'on modifie le type de InfoFun car il n'est plus nécessaire de les stocker en mémoire.


Faire en sorte que les fonctions cherchent d'abord dans la TDS locale puis la TDS globale en vérifiant, si une variable est trouvée, si elle est du type InfoVarGlobale




Ou mémoriser le décalage dans SB grâce à InfoFun, on mémorise le décalage des emplacements des variables locales statiques de la fonctions et on augmente la taille occupée par les variables statiques à chaque déclaration statique.

Ensuite on utilise une fonction pour récupérer la taille occupée par les variables statiques de la fonction

Donc on donne à analyse fonction le depl actuel du registre ST.
On augmente la valeur dans l'InfoFun.

Voir si InfoFun peut uniquement contenir la taille occupée.


Je peux mettre deplSB dans analyse_placement_instruction

et dans 

analyse_placement_fonction et créer une fonction analyse_placement_instruction_fonction i depl reg = (AstPlacement.instruction(…) * deplSB)

et analyse_placement_bloc_fonction renvoie (AstPlacement.bloc(…) * deplSB)

Implanter les nouvelles exceptions

Elles traitent uniquement différemment les cas nécessaires sinon elles renvoient (analyse_placement_instruction i depl reg, 0)